"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ —á–µ—Ä–µ–∑ Vespa —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vespa.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
from utils.search_documents import search_documents
results = search_documents(["–∑–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π", "–±–µ—Ç–æ–Ω"], ["–°–ü 63.13330.2018"])

# –ü–æ–∏—Å–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
from utils.search_documents import search_documents_with_images
results = search_documents_with_images(["–∑–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π", "–±–µ—Ç–æ–Ω"], include_images=True)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
import asyncio
from utils.search_documents import search_documents_with_images_async

async def main():
    results = await search_documents_with_images_async(["–∑–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π"])
    print(results)

asyncio.run(main())

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª):
- VESPA_LOCAL_URL: URL —Å–µ—Ä–≤–µ—Ä–∞ Vespa (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- VESPA_LOCAL_PORT: –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ Vespa (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- IMG_CACHE_DIR: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
"""

import json
import os
import asyncio
import logging
import base64
import io
from pathlib import Path
from typing import List, Dict, Any, Optional

try:
    from dotenv import load_dotenv
    DOTENV_AVAILABLE = True
except ImportError:
    raise ImportError("python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")

try:
    from vespa.application import Vespa
    VESPA_AVAILABLE = True
except ImportError:
    raise ImportError("pyvespa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyvespa")

try:
    from PIL import Image
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False
    logging.warning("PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)



class DocumentSearchClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ —á–µ—Ä–µ–∑ Vespa —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞."""
        self.vespa_client = None
        self.img_cache_dir = None
        self._init_vespa()
        self._init_cache_dir()
        
    def _init_vespa(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vespa –∫–ª–∏–µ–Ω—Ç–∞"""
        print(f"üîç DocumentSearchClient: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vespa")
        load_dotenv()
        
        vespa_url = os.environ.get("VESPA_LOCAL_URL")
        vespa_port = os.environ.get("VESPA_LOCAL_PORT")
        
        print(f"üîç DocumentSearchClient: vespa_url = {vespa_url}")
        print(f"üîç DocumentSearchClient: vespa_port = {vespa_port}")
        
        if not vespa_url:
            print(f"üîç DocumentSearchClient: VESPA_LOCAL_URL –Ω–µ –∑–∞–¥–∞–Ω")
            logger.error("VESPA_LOCAL_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("VESPA_LOCAL_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not vespa_port:
            print(f"üîç DocumentSearchClient: VESPA_LOCAL_PORT –Ω–µ –∑–∞–¥–∞–Ω")
            logger.error("VESPA_LOCAL_PORT –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("VESPA_LOCAL_PORT –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        try:
            print(f"üîç DocumentSearchClient: –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Vespa {vespa_url}:{vespa_port}")
            self.vespa_client = Vespa(url=vespa_url, port=int(vespa_port))
            self.vespa_client.wait_for_application_up()
            print(f"‚úÖ DocumentSearchClient: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vespa —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vespa —É—Å–ø–µ—à–Ω–æ: {vespa_url}:{vespa_port}")
        except Exception as e:
            print(f"‚ùå DocumentSearchClient: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Vespa: {e}")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Vespa {vespa_url}:{vespa_port}: {e}")
            raise

    def _init_cache_dir(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        cache_dir = os.environ.get("IMG_CACHE_DIR", "./img_cache")
        self.img_cache_dir = Path(cache_dir)
        self.img_cache_dir.mkdir(exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.img_cache_dir}")

    def _compress_image(self, img_path: Path, max_size=(1680, 1680), quality=80):
        """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤."""
        if not PIL_AVAILABLE:
            logger.warning("PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return None
            
        try:
            with Image.open(img_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ("RGBA", "LA") or (img.mode == "P" and "transparency" in img.info):
                    background = Image.new("RGB", img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[-1] if img.mode == "RGBA" else None)
                    img = background
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                buffered = io.BytesIO()
                img.save(buffered, format="JPEG", quality=quality, optimize=True)
                
                return base64.b64encode(buffered.getvalue()).decode("utf-8")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
            return None
    
    def _compress_base64_image(self, base64_data: str, max_size=(1680, 1680), quality=80):
        """–°–∂–∏–º–∞–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if not PIL_AVAILABLE:
            logger.warning("PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return base64_data
            
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            img_data = base64.b64decode(base64_data)
            img = Image.open(io.BytesIO(img_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode in ("RGBA", "LA") or (img.mode == "P" and "transparency" in img.info):
                background = Image.new("RGB", img.size, (255, 255, 255))
                background.paste(img, mask=img.split()[-1] if img.mode == "RGBA" else None)
                img = background
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            buffered = io.BytesIO()
            img.save(buffered, format="JPEG", quality=quality, optimize=True)
            
            return base64.b64encode(buffered.getvalue()).decode("utf-8")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return base64_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å

    async def _get_full_image_from_vespa(self, doc_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Vespa –ø–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        if not self.vespa_client:
            logger.error("Vespa –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ - contains –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
            async with self.vespa_client.asyncio(connections=1) as session:
                response = await session.query(
                    body={
                        "yql": f'select full_image from pdf_page where id contains "{doc_id}"',
                        "ranking": "unranked",
                        "presentation.timing": True,
                        "ranking.matching.numThreadsPerSearch": 1,
                    }
                )
                
                if response.is_successful():
                    children = response.json.get("root", {}).get("children", [])
                    if children:
                        image_data = children[0]["fields"]["full_image"]
                        if image_data:
                            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {doc_id}, —Ä–∞–∑–º–µ—Ä: {len(image_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return image_data
                        else:
                            logger.warning(f"–ü–æ–ª–µ full_image –ø—É—Å—Ç–æ–µ –¥–ª—è {doc_id}")
                    else:
                        logger.warning(f"–î–æ–∫—É–º–µ–Ω—Ç —Å ID {doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Vespa: {response.json}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Vespa –¥–ª—è {doc_id}: {e}")
            
        return None

    async def search_documents_with_images_async(
        self, 
        semantic_keywords: List[str], 
        expected_documents: Optional[List[str]] = None,
        hits: int = 3,
        include_images: bool = False
    ) -> Optional[List[Dict[str, Any]]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Vespa —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        Args:
            semantic_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            expected_documents: –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            hits: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            include_images: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Vision API —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ None
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results = await self.search_documents_async(semantic_keywords, expected_documents, hits)
        
        if not results or not include_images:
            return results
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        enhanced_results = []
        images_data = {}
        
        for result in results:
            doc_id = result.get("image_id", "")
            
            if doc_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                if self.img_cache_dir:
                    img_path = self.img_cache_dir / f"{doc_id}.jpg"
                else:
                    continue
                
                if img_path.exists():
                    try:
                        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        img_data = self._compress_image(img_path)
                        if img_data:
                            images_data[doc_id] = img_data
                            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {doc_id} –∏–∑ –∫—ç—à–∞")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {doc_id}: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑ Vespa –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
                if doc_id not in images_data:
                    try:
                        img_data = await self._get_full_image_from_vespa(doc_id)
                        if img_data:
                            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Vespa
                            compressed_img = self._compress_base64_image(img_data)
                            if compressed_img:
                                images_data[doc_id] = compressed_img
                                # –ö—ç—à–∏—Ä—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                try:
                                    with open(img_path, "wb") as f:
                                        f.write(base64.b64decode(compressed_img))
                                    logger.debug(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {doc_id}")
                                except Exception as e:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {doc_id}: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Vespa –¥–ª—è {doc_id}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            enhanced_result = result.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Vision API —Ñ–æ—Ä–º–∞—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if doc_id in images_data:
                enhanced_result["vision_content"] = [
                    {
                        "type": "image_url",
                        "min_pixels": 512 * 28 * 28,
                        "max_pixels": 1680 * 28 * 28,
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{images_data[doc_id]}",
                        },
                    }
                ]
                enhanced_result["has_image"] = True
            else:
                enhanced_result["has_image"] = False
            
            enhanced_results.append(enhanced_result)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(enhanced_results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å {len(images_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        return enhanced_results

    async def search_documents_async(
        self, 
        semantic_keywords: List[str], 
        expected_documents: Optional[List[str]] = None,
        hits: int = 3
    ) -> Optional[List[Dict[str, Any]]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Vespa (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).
        
        Args:
            semantic_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            expected_documents: –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["–°–ü 63.13330.2018"])
            hits: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Vespa –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not self.vespa_client:
            logger.error("Vespa –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        # –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Vespa
        try:
            query = " ".join(semantic_keywords)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–æ–¥–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            filter_clause = ""
            if expected_documents:
                # –°–æ–∑–¥–∞–µ–º OR —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_conditions = []
                for doc in expected_documents:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º contains –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ matches –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ
                    if "–°–ü 63" in doc:
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –°–ü 63 - –∏—â–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        doc_conditions.append('(doc_code contains "–°–ü 63" or doc_code contains "–°–ü63")')
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º contains –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        doc_conditions.append(f'doc_code contains "{doc}"')
                
                if doc_conditions:
                    filter_clause = f' and ({" or ".join(doc_conditions)})'
                    print(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {expected_documents}")
            else:
                print(f"üîç –ü–æ–∏—Å–∫ –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
            
            yql = f"select id,title,doc_code,page_number,snippet,text from pdf_page where userQuery(){filter_clause}"
            
            print(f"üîç Vespa –∑–∞–ø—Ä–æ—Å:")
            print(f"   query = '{query}'")
            print(f"   filter_clause = '{filter_clause}'")
            print(f"   yql = '{yql}'")
            print(f"   hits = {hits}")
            
            async with self.vespa_client.asyncio(connections=1) as session:
                request_body = {
                    "yql": yql,
                    "ranking": "bm25",
                    "query": query,
                    "timeout": "10s",
                    "hits": hits,
                    "presentation.timing": True,
                }
                print(f"üîç Vespa request body: {request_body}")
                
                response = await session.query(body=request_body)
                
                print(f"üîç Vespa response:")
                print(f"   is_successful = {response.is_successful()}")
                print(f"   status_code = {getattr(response, 'status_code', 'unknown')}")
                
                if response.is_successful():
                    hits_data = response.json.get("root", {}).get("children", [])
                    print(f"üîç Vespa hits: {len(hits_data)}")
                    
                    if not hits_data:
                        logger.warning("Vespa –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        return None
                    
                    results = []
                    for hit in hits_data:
                        fields = hit.get("fields", {})
                        
                        # –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        print(f"üîç –î–æ–∫—É–º–µ–Ω—Ç {fields.get('id', 'unknown')}:")
                        print(f"   title = {fields.get('title', 'N/A')}")
                        print(f"   doc_code = {fields.get('doc_code', 'N/A')}")
                        print(f"   page_number = {fields.get('page_number', 'N/A')}")
                        
                        result = {
                            "image_id": fields.get("id", ""),
                            "source_document": fields.get("doc_code", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"),
                            "page_number": fields.get("page_number", 0),
                            "content_preview": fields.get("snippet", fields.get("text", ""))[:300] + "..." if fields.get("snippet") or fields.get("text") else "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                            "title": fields.get("title", ""),
                            "full_text": fields.get("text", "")
                        }
                        results.append(result)
                    
                    logger.info(f"Vespa –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    return results
                else:
                    logger.error(f"Vespa –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.json}")
                    return None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Vespa: {e}", exc_info=True)
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_global_client = None

def get_client():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞."""
    global _global_client
    if _global_client is None:
        _global_client = DocumentSearchClient()
    return _global_client

def search_documents(
    semantic_keywords: List[str], 
    expected_documents: Optional[List[str]] = None,
    hits: int = 3
) -> Optional[List[Dict[str, Any]]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏).
    
    Args:
        semantic_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        expected_documents: –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        hits: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ None
    """
    client = get_client()
    loop = asyncio.get_event_loop()
    return loop.run_until_complete(
        client.search_documents_async(semantic_keywords, expected_documents, hits)
    )

def search_documents_with_images(
    semantic_keywords: List[str], 
    expected_documents: Optional[List[str]] = None,
    hits: int = 3,
    include_images: bool = True
) -> Optional[List[Dict[str, Any]]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
    
    Args:
        semantic_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        expected_documents: –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        hits: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        include_images: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Vision API —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ None
    """
    client = get_client()
    loop = asyncio.get_event_loop()
    return loop.run_until_complete(
        client.search_documents_with_images_async(semantic_keywords, expected_documents, hits, include_images)
    )

async def search_documents_async(
    semantic_keywords: List[str], 
    expected_documents: Optional[List[str]] = None,
    hits: int = 3
) -> Optional[List[Dict[str, Any]]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–±–µ—Ä—Ç–∫–∞).
    
    Args:
        semantic_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        expected_documents: –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        hits: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ None
    """
    client = get_client()
    return await client.search_documents_async(semantic_keywords, expected_documents, hits)

async def search_documents_with_images_async(
    semantic_keywords: List[str], 
    expected_documents: Optional[List[str]] = None,
    hits: int = 3,
    include_images: bool = True
) -> Optional[List[Dict[str, Any]]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–æ–±–µ—Ä—Ç–∫–∞).
    
    Args:
        semantic_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        expected_documents: –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        hits: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        include_images: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Vision API —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ None
    """
    client = get_client()
    return await client.search_documents_with_images_async(semantic_keywords, expected_documents, hits, include_images)

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("=== –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ===")
    try:
        results = search_documents(["–∑–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π", "–±–µ—Ç–æ–Ω"])
        if results:
            for i, result in enumerate(results, 1):
                print(f"{i}. {result['source_document']} (—Å—Ç—Ä. {result['page_number']})")
        else:
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    print("\n=== –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ===")
    try:
        results_with_images = search_documents_with_images(["–∑–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π"], include_images=True)
        if results_with_images:
            for i, result in enumerate(results_with_images, 1):
                print(f"{i}. {result['source_document']}")
                print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ' if result.get('has_image') else '‚ùå'}")
                if result.get('vision_content'):
                    print(f"   Vision API —Ñ–æ—Ä–º–∞—Ç: –≥–æ—Ç–æ–≤")
        else:
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {e}")
    
    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    async def test_async():
        print("\n=== –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ===")
        try:
            results = await search_documents_with_images_async(["–∞—Ä–º–∞—Ç—É—Ä–∞"], include_images=True)
            if results:
                for i, result in enumerate(results, 1):
                    print(f"{i}. {result['source_document']}")
                    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ' if result.get('has_image') else '‚ùå'}")
            else:
                print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
    
    asyncio.run(test_async()) 