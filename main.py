from flow import norma_agent_flow
import json
from utils.terminal_logger import start_terminal_logging, stop_terminal_logging
import debugpy


def main():
    debugpy.wait_for_client()
    
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å YAML-–ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_path = start_terminal_logging("norma_agent.log", "logs")
    
    print("üèóÔ∏è NormaGPT - –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–æ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–µ—Ä–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # user_query = "–ò–º–µ–µ—Ç—Å—è –∫–æ–ª–æ–Ω–Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–º 700 –º–º. –ö–æ–ª–æ–Ω–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É–ª–∏—Ü–µ. –ö–∞–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –∑–∞—â–∏—Ç–Ω–æ–≥–æ —Å–ª–æ—è –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç—å –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–Ω—ã? –° —É—á–µ—Ç–æ–º –≤–µ–ª–∏—á–∏–Ω—ã –∑–∞—â–∏—Ç–Ω–æ–≥–æ —Å–ª–æ—è –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–µ—Ä–∂–Ω—è–º–∏, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞—Ä–º–∞—Ç—É—Ä—ã –≤ —Ç–∞–∫–æ–π –∫–æ–ª–æ–Ω–Ω–µ?"
    user_query = "–ö–∞–∫–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –±–µ—Ç–æ–Ω–∞ —Å–∂–∞—Ç–∏—é –∏ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—é –¥–ª—è –±–µ—Ç–æ–Ω–∞ –∫–ª–∞—Å—Å–∞ B60?"
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: {user_query}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º shared store
    shared = {
        "user_query": user_query,
        "status": "planning",
        "plan": None,
        "scratchpad": {},
        "execution_history": [],
        "step_results": {},
        "final_answer": None,
        "error": None
    }
    
    
    try:
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–Ω—ã–π –≥—Ä–∞—Ñ
        norma_agent_flow.run(shared)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 70)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 70)
        
        if shared["status"] == "completed" and shared.get("final_answer"):
            print(shared["final_answer"])
            
            if shared.get("debug_summary"):
                print(f"\nüîç –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: {shared['debug_summary'].get('overall_quality', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {shared['debug_summary'].get('confidence_score', 0):.2f}")
        
        elif shared["status"] == "human_review_required":
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {shared.get('human_review_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}")
        
        elif shared["status"] == "error":
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {shared.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {shared['status']}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüîß –°—Ç–∞—Ç—É—Å: {shared['status']}")
        print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {len(shared['execution_history'])}")
        
        if shared["execution_history"]:
            print("\nüìà –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            for i, step in enumerate(shared["execution_history"], 1):
                status_emoji = "‚úÖ" if step["status"] == "success" else "‚ùå"
                print(f"  {i}. {status_emoji} {step['action']} -> {step['status']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ YAML-–ø—Ä–æ–º–ø—Ç–∞—Ö
        if shared.get("scratchpad"):
            print(f"\nüéØ –î–æ–º–µ–Ω –∑–∞–ø—Ä–æ—Å–∞: {shared['scratchpad'].get('query_domain', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            priority_docs = shared['scratchpad'].get('priority_documents', [])
            if priority_docs:
                print(f"üìö –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(priority_docs)}")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        stop_terminal_logging()
    
    print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° YAML-–ø—Ä–æ–º–ø—Ç—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∞–≥–µ–Ω—Ç–æ–º")

if __name__ == "__main__":
    main()
