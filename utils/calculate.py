"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
from utils.calculate import calculate

result = calculate("2 + 2 * 3")
print(result)  # –†–µ–∑—É–ª—å—Ç–∞—Ç: 8
"""

import logging
import re
import math
from typing import Dict, Any, Union
from utils.schemas import CalculateInput, CalculateOutput, StatusEnum

logger = logging.getLogger(__name__)


def calculate(input_variables: Dict[str, Any], expression: str, output_variable: str) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        input_variables: –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª—É
        expression: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        output_variable: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ CalculateOutput
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        calc_input = CalculateInput(
            input_variables=input_variables,
            expression=expression,
            output_variable=output_variable
        )
        
        print(f"üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç: {output_variable}")
        print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {input_variables}")
        print(f"üìê –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}")
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        calc_context = {
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'sin': math.sin,
            'cos': math.cos,
            'tan': math.tan,
            'sqrt': math.sqrt,
            'log': math.log,
            'log10': math.log10,
            'exp': math.exp,
            'pow': math.pow,
            'abs': abs,
            'min': min,
            'max': max,
            'floor': math.floor,
            'ceil': math.ceil,
            'round': round,
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            'pi': math.pi,
            'e': math.e,
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        processed_vars = {}
        calculation_steps = []
        
        for var_name, var_value in input_variables.items():
            if isinstance(var_value, str) and var_value.startswith('{') and var_value.endswith('}'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
                # –ù–∞–ø—Ä–∏–º–µ—Ä: "{step_1.structured_output.value}" -> –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ step_1
                calculation_steps.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞: {var_value}")
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞
                clean_value = var_value.strip('{}')
                calculation_steps.append(f"‚ö†Ô∏è –ó–∞–≥–ª—É—à–∫–∞: {var_name} = {clean_value} (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)")
                processed_vars[var_name] = 0  # –ó–∞–≥–ª—É—à–∫–∞
            else:
                processed_vars[var_name] = float(var_value) if not isinstance(var_value, (int, float)) else var_value
                calculation_steps.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} = {processed_vars[var_name]}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        calc_context.update(processed_vars)
        
        calculation_steps.append(f"–í—ã—á–∏—Å–ª—è–µ–º: {expression}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        result = eval(expression, {"__builtins__": {}}, calc_context)
        
        calculation_steps.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_variable} = {result}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CalculateOutput
        output = CalculateOutput(
            status=StatusEnum.SUCCESS,
            result=result,
            error_message=None,
            calculation_steps=calculation_steps
        )
        
        return output.dict()
        
    except ValueError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        print(f"‚ùå {error_msg}")
        return CalculateOutput(
            status=StatusEnum.FAILURE,
            result=None,
            error_message=error_msg,
            calculation_steps=None
        ).dict()
        
    except ZeroDivisionError as e:
        error_msg = f"–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {expression}"
        print(f"‚ùå {error_msg}")
        return CalculateOutput(
            status=StatusEnum.FAILURE,
            result=None,
            error_message=error_msg,
            calculation_steps=None
        ).dict()
        
    except NameError as e:
        error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        return CalculateOutput(
            status=StatusEnum.FAILURE,
            result=None,
            error_message=error_msg,
            calculation_steps=None
        ).dict()
        
    except SyntaxError as e:
        error_msg = f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        return CalculateOutput(
            status=StatusEnum.FAILURE,
            result=None,
            error_message=error_msg,
            calculation_steps=None
        ).dict()
        
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        return CalculateOutput(
            status=StatusEnum.FAILURE,
            result=None,
            error_message=error_msg,
            calculation_steps=None
        ).dict()

def extract_step_value(step_reference: str, global_context: Dict[str, Any]) -> Union[float, int]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤.
    
    Args:
        step_reference: –°—Å—ã–ª–∫–∞ —Ç–∏–ø–∞ "step_1.structured_output.value"
        global_context: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö —à–∞–≥–æ–≤
        
    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É —Ç–∏–ø–∞ "step_1.structured_output.value"
        match = re.match(r'step_(\d+)\.structured_output\.value', step_reference)
        if match:
            step_num = int(match.group(1))
            step_key = f"step_{step_num}"
            
            if step_key in global_context and 'structured_output' in global_context[step_key]:
                structured_data = global_context[step_key]['structured_output']
                if isinstance(structured_data, list) and len(structured_data) > 0:
                    return structured_data[0].get('value', 0)
                elif isinstance(structured_data, dict):
                    return structured_data.get('value', 0)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        return 0
    except Exception:
        return 0

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_cases = [
        {
            "input_variables": {"D": 700, "a": 40, "s_min": 25, "d_bar": 16},
            "expression": "floor(pi * (D - 2*a - d_bar) / (s_min + d_bar))",
            "output_variable": "max_rebar_count"
        },
        {
            "input_variables": {"L": 6000, "q": 15, "b": 300, "h": 500},
            "expression": "q * L * L / 8",
            "output_variable": "max_moment"
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n=== –¢–ï–°–¢ {i} ===")
        result = calculate(**test)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ {i}: {result}") 