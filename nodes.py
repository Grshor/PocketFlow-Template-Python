from pocketflow import Node
from utils.call_llm import call_llm
from utils.search_documents import search_documents, search_documents_with_images
from utils.parse_yaml import parse_yaml_response
from utils.prompt_loader import (
    get_planner_prompt, 
    get_analyzer_prompt, 
    get_judge_prompt, 
    get_finalizer_prompt
)
from utils.schemas import AnalyzerOutput, JudgeOutput, FinalizerOutput
from utils.calculate import calculate
import json
import re
from agent_debug.decorators import recordable_node

class PlannerNode(Node):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YAML-–ø—Ä–æ–º–ø—Ç–∞"""
    
    @recordable_node
    def prep(self, shared):
        return shared["user_query"]
    
    @recordable_node
    def exec(self, user_query):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º YAML-–ø—Ä–æ–º–ø—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        system_prompt = get_planner_prompt()
        print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É LLM...")
        response = call_llm(user_query, system_prompt)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ LLM")
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –û—Ç–≤–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        print(f"==== RAW RESPONSE ====")
        print(response)
        print(f"==== END RAW RESPONSE ====")
        
        parsed = parse_yaml_response(response)
        if "error" not in parsed:
            print(f"‚úÖ –û–¢–õ–ê–î–ö–ê: –í—Å–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω—ã")
        else:
            print(f"‚ùå –û–¢–õ–ê–î–ö–ê: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {parsed.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        return parsed
    
    @recordable_node
    def post(self, shared, prep_res, exec_res):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ exec_res –Ω–µ None
        if exec_res is None:
            shared["status"] = "error"
            shared["error"] = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å LLM –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º YAML."
            return "error"
        
        if "error" in exec_res:
            shared["status"] = "error"
            shared["error"] = f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {exec_res['error']}"
            return "error"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if "plan" not in exec_res:
            shared["status"] = "error"
            shared["error"] = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'plan' –≤ –æ—Ç–≤–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. –ü–æ–ª—É—á–µ–Ω–æ: {list(exec_res.keys())}"
            return "error"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        shared["plan"] = exec_res["plan"]
        shared["scratchpad"] = exec_res.get("initial_scratchpad", {})
        shared["context_analysis"] = exec_res.get("context_analysis", {})
        shared["plan"]["current_step_index"] = 0
        shared["status"] = "executing"
        shared["execution_history"] = []
        shared["step_results"] = {}
        
        print(f"üìã –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {exec_res['plan'].get('goal', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å')}")
        print(f"üéØ –®–∞–≥–æ–≤ –≤ –ø–ª–∞–Ω–µ: {len(exec_res['plan'].get('steps', []))}")
        
        return "execute"

class ExecutorNode(Node):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–ª–∞–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Vision API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    @recordable_node
    def prep(self, shared):
        plan = shared["plan"]
        current_index = plan["current_step_index"]
        
        if current_index >= len(plan["steps"]):
            return None  # –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            
        current_step = plan["steps"][current_index]
        
        # –î–æ–±–∞–≤–ª—è–µ–º step_results –¥–ª—è calculate –æ–ø–µ—Ä–∞—Ü–∏–π
        current_step["step_results"] = shared.get("step_results", {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º user_query –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        current_step["user_query"] = shared.get("user_query", "")
        
        return current_step
    
    @recordable_node
    def exec(self, current_step):
        if current_step is None:
            return {"status": "completed", "message": "–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"}
        
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ —Å Vision API {current_step['step_number']}: {current_step['action']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if current_step["tool"] == "search_documents":
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            semantic_keywords = current_step["semantic_keywords"]
            expected_documents = current_step.get("expected_documents", [])
            
            print(f"üîç –ü–æ–∏—Å–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {semantic_keywords}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            documents = search_documents_with_images(
                semantic_keywords, 
                expected_documents, 
                include_images=True,
                hits=3
            )
            
            if documents is None:
                print(f"‚ùå –ü–æ–∏—Å–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return {
                    "status": "failure",
                    "error_code": "SEARCH_FAILED",
                    "error_message": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                    "output": {"data": "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ"}
                }
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            vision_messages = []
            sources_info = []
            images_count = 0
            
            for doc in documents:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Vision API —Ñ–æ—Ä–º–∞—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if doc.get("vision_content"):
                    vision_messages.extend(doc["vision_content"])
                    sources_info.append({
                        "source_document": doc["source_document"]
                    })
                    images_count += 1
            
            print(f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Vision API - —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            system_prompt = get_analyzer_prompt()
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            import yaml
            sources_yaml = yaml.dump(sources_info, allow_unicode=True, default_flow_style=False)
            user_prompt = f"""–ó–∞–¥–∞—á–∞: {current_step.get("action", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")}

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
{sources_yaml}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É."""
            
            # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è Vision –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            max_retries = 3
            for attempt in range(max_retries):
                print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å Vision –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É LLM (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})...")
                response = call_llm(
                    user_prompt, 
                    system_prompt, 
                    task_type="analyzer",
                    vision_content=vision_messages
                )
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Vision –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ LLM")
                
                print(f"üìù –û—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:")
                print(response)
                
                result = parse_yaml_response(response)
                
                # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –ø–æ–ª—è error), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if "error" not in result:
                    break
                    
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å YAML –æ—Ç–≤–µ—Ç")
                if attempt < max_retries - 1:
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
            if "error" in result:
                return {
                    "status": "failure",
                    "error_code": "PARSE_FAILED",
                    "error_message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Vision –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    "output": {"data": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"}
                }
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            if "error" not in result and result.get("status") == "success":
                result_output = result.get("output", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ output —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                if isinstance(result_output, dict):
                    adapted_result = {
                        "status": "success",
                        "output": {
                            "data": result_output.get("data", ""),
                            "structured_output": result_output.get("structured_output", []),
                            "source": result_output.get("source", {}),
                            "evaluation": result.get("evaluation", {}) if isinstance(result, dict) else {}
                        }
                    }
                else:
                    # –ï—Å–ª–∏ output –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    adapted_result = {
                        "status": "success",
                        "output": {
                            "data": str(result_output),
                            "source": {},
                            "evaluation": result.get("evaluation", {})
                        }
                    }
                
                print(f"‚úÖ Vision –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return adapted_result
            
            print(f"‚ùå –û—à–∏–±–∫–∞ Vision –∞–Ω–∞–ª–∏–∑–∞")
            return result
        
        elif current_step["tool"] == "calculate":
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            from utils.calculate import calculate
            import math
            
            print(f"üßÆ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ")
            
            # –õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ step_results –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –∏ input_variables
            input_variables = current_step.get("input_variables", {})
            print(f"üìä –¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {input_variables}")
            
            step_results = current_step.get("step_results", {})
            user_query = current_step.get("user_query", "")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            calculation_context = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º input_variables (—ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫)
            for var_name, var_value in input_variables.items():
                if isinstance(var_value, (int, float)):
                    calculation_context[var_name] = var_value
                elif isinstance(var_value, str):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
                    if var_value.startswith("{") and var_value.endswith("}"):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ {step_1.structured_output.value}
                        ref = var_value.strip("{}")
                        print(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É: {ref}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
                        if ref.startswith("step_") and ".structured_output.value" in ref:
                            step_match = re.match(r'step_(\d+)\.structured_output\.value', ref)
                            if step_match:
                                step_num = int(step_match.group(1))
                                step_key = f"step_{step_num}"
                                
                                if step_key in step_results:
                                    structured_output = step_results[step_key].get("output", {}).get("structured_output", [])
                                    if isinstance(structured_output, list) and len(structured_output) > 0:
                                        value = structured_output[0].get("value")
                                        if isinstance(value, (int, float)):
                                            calculation_context[var_name] = value
                                            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {var_name} = {value}")
                                            continue
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, —Å—Ç–∞–≤–∏–º 0
                        calculation_context[var_name] = 0
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {var_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0")
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
                        try:
                            calculation_context[var_name] = float(var_value)
                        except ValueError:
                            calculation_context[var_name] = 0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            user_numbers = re.findall(r'\d+(?:\.\d+)?', user_query)
            for i, num in enumerate(user_numbers):
                calculation_context[f"user_value_{i}"] = float(num)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
            for step_id, result in step_results.items():
                step_data = result.get("output", {}).get("data", "")
                if isinstance(step_data, str):
                    numbers = re.findall(r'\d+(?:\.\d+)?', step_data)
                    for i, num in enumerate(numbers):
                        calculation_context[f"{step_id}_value_{i}"] = float(num)
                # –ù–æ–≤—ã–π –±–ª–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º structured_output, –µ—Å–ª–∏ –µ—Å—Ç—å
                structured_items = result.get("output", {}).get("structured_output", [])
                if isinstance(structured_items, list):
                    for item in structured_items:
                        var_name = item.get("variable_name") or item.get("entity")
                        value = item.get("value")
                        if var_name and isinstance(value, (int, float)):
                            calculation_context[var_name] = value
            
            print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {calculation_context}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            expression = current_step.get("expression", "")
            formula = current_step.get("formula", "")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º formula –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ expression
            calc_expression = formula if formula else expression
            
            if not calc_expression:
                # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
                print("üîç –ò—â–µ–º —Ñ–æ—Ä–º—É–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤...")
                
                # –ò—â–µ–º —Ñ–æ—Ä–º—É–ª—ã –≤ —Ç–µ–∫—Å—Ç–∞—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
                formula_patterns = [
                    r'([–ê-–Ø–∞-—è_]+)\s*=\s*([^=\n]+)',  # –§–æ—Ä–º—É–ª–∞ –≤–∏–¥–∞ A = B * C
                    r'—Ñ–æ—Ä–º—É–ª–∞[:\s]*([^.\n]+)',        # "—Ñ–æ—Ä–º—É–ª–∞: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
                    r'—Ä–∞—Å—á–µ—Ç[:\s]*([^.\n]+)',         # "—Ä–∞—Å—á–µ—Ç: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
                    r'([–ê-–Ø–∞-—è_]+)\s*—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è\s*–ø–æ\s*—Ñ–æ—Ä–º—É–ª–µ[:\s]*([^.\n]+)',
                ]
                
                found_formulas = []
                for step_id, result in step_results.items():
                    step_data = result.get("output", {}).get("data", "")
                    if isinstance(step_data, str):
                        for pattern in formula_patterns:
                            matches = re.findall(pattern, step_data, re.IGNORECASE)
                            for match in matches:
                                if isinstance(match, tuple) and len(match) == 2:
                                    formula_name, formula_expr = match
                                    found_formulas.append({
                                        "step": step_id,
                                        "name": formula_name.strip(),
                                        "expression": formula_expr.strip()
                                    })
                                    print(f"üìê –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤ {step_id}: {formula_name} = {formula_expr}")
                
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ñ–æ—Ä–º—É–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é
                if found_formulas:
                    calc_expression = found_formulas[0]["expression"]
                    print(f"üìê –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É: {calc_expression}")
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
                elif len(calculation_context) >= 2:
                    values = list(calculation_context.values())
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏
                    calc_expression = f"{values[0]} + {values[1]}"
                    print(f"üìê –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {calc_expression}")
                else:
                    return {
                        "status": "failure", 
                        "error_code": "NO_EXPRESSION",
                        "error_message": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º—É–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö",
                        "output": {"data": "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"}
                    }
            
            print(f"üìê –í—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {calc_expression}")
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ)
            final_expression = calc_expression
            sorted_vars = sorted(calculation_context.items(), key=lambda x: len(x[0]), reverse=True)
            for var_name, var_value in sorted_vars:
                final_expression = final_expression.replace(var_name, str(var_value))
            
            # –ó–∞–º–µ–Ω—è–µ–º œÄ –Ω–∞ math.pi
            final_expression = final_expression.replace("œÄ", str(math.pi))
            final_expression = final_expression.replace("pi", str(math.pi))
            
            print(f"üìê –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {final_expression}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            calc_result = calculate(
                input_variables={},  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                expression=final_expression,
                output_variable=current_step.get("output_variable", "result")
            )
            
            if calc_result.get("status") == "success":
                result_value = calc_result.get("result")
                return {
                    "status": "success",
                    "output": {
                        "data": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {result_value}\n\n–í—ã—Ä–∞–∂–µ–Ω–∏–µ: {calc_expression}\n–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞: {final_expression}",
                        "structured_output": [{
                            "entity": current_step.get("output_variable", "result"),
                            "value": result_value,
                            "variable_name": current_step.get("output_variable", "result"),
                            "source_reference": "–í—ã—á–∏—Å–ª–µ–Ω–æ"
                        }],
                        "source": {
                            "tool": "calculate", 
                            "expression": calc_expression,
                            "final_expression": final_expression,
                            "context": calculation_context
                        }
                    }
                }
            else:
                return {
                    "status": "failure",
                    "error_message": calc_result.get("error_message", "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"),
                    "output": {
                        "data": f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {calc_result.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    }
                }
            
        else:
            return {
                "status": "failure",
                "error_code": "UNSUPPORTED_TOOL",
                "error_message": f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{current_step['tool']}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
                "output": {"data": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"}
            }
    
    @recordable_node
    def post(self, shared, prep_res, exec_res):
        plan = shared["plan"]
        current_index = plan["current_step_index"]
        
        if prep_res is None:
            shared["status"] = "judging_final"
            return "judge"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ exec_res –Ω–µ None
        if exec_res is None:
            exec_res = {
                "status": "failure",
                "error": "Executor –≤–µ—Ä–Ω—É–ª None",
                "output": {"data": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"}
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö retry, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if (isinstance(exec_res, dict) and 
            exec_res.get("status") == "failure" and 
            exec_res.get("error_code") == "PARSE_FAILED" and
            "–ø–æ—Å–ª–µ" in str(exec_res.get("error_message", ""))):
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Vision –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–¥—å—é")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            plan["current_step_index"] += 1
            step_id = f"step_{current_index + 1}"
            shared["step_results"][step_id] = exec_res
            
            shared["execution_history"].append({
                "step_number": current_index + 1,
                "action": prep_res.get("action", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ") if prep_res else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "status": "failed_parse",
                "result_summary": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Vision: {exec_res.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            })
            
            if plan["current_step_index"] >= len(plan["steps"]):
                return "judge"
            else:
                return "execute"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞
        step_id = f"step_{current_index + 1}"
        shared["step_results"][step_id] = exec_res
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        result_summary = "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
        if (exec_res and 
            isinstance(exec_res.get("output"), dict) and 
            exec_res["output"].get("data")):
            result_summary = str(exec_res["output"]["data"])[:100] + "..."
        
        shared["execution_history"].append({
            "step_number": current_index + 1,
            "action": prep_res.get("action", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
            "status": exec_res.get("status", "unknown") if exec_res else "unknown",
            "result_summary": result_summary
        })
        
        if exec_res and exec_res.get("status") == "completed":
            return "judge"
        elif exec_res and exec_res.get("status") == "success":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            plan["current_step_index"] += 1
            if plan["current_step_index"] >= len(plan["steps"]):
                return "judge"
            else:
                return "execute"
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—É–¥—å–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            shared["status"] = "judging"
            return "judge"

class JudgeNode(Node):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YAML-–ø—Ä–æ–º–ø—Ç–∞"""
    
    @recordable_node
    def prep(self, shared):
        current_index = shared["plan"]["current_step_index"]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–¥—å–∏
        judge_input = {
            "user_query": shared["user_query"],
            "plan_goal": shared["plan"]["goal"],
            "remaining_plan_steps": shared["plan"]["steps"][current_index + 1:],
            "last_step_result": shared["step_results"].get(f"step_{current_index + 1}", {}),
            "scratchpad": shared["scratchpad"],
            "execution_history": shared["execution_history"]
        }
        
        return judge_input
    
    @recordable_node
    def exec(self, judge_input):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º YAML-–ø—Ä–æ–º–ø—Ç —Å—É–¥—å–∏ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        import yaml
        system_prompt = get_judge_prompt(
            user_query=judge_input["user_query"],
            plan_goal=judge_input["plan_goal"],
            remaining_plan_steps=yaml.dump(judge_input["remaining_plan_steps"], allow_unicode=True, default_flow_style=False),
            executor_output_json=yaml.dump(judge_input["last_step_result"], allow_unicode=True, default_flow_style=False),
            scratchpad_json=yaml.dump(judge_input["scratchpad"], allow_unicode=True, default_flow_style=False),
            history_log=yaml.dump(judge_input["execution_history"], allow_unicode=True, default_flow_style=False)
        )
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê –°–£–î–¨–ò: –í—ã–∑—ã–≤–∞–µ–º LLM —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª–∏–Ω–æ–π {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—É–¥—å–∏
        max_retries = 3
        for attempt in range(max_retries):
            print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—É–¥—å–µ LLM (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})...")
            response = call_llm("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ.", system_prompt)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å—É–¥—å–∏ LLM")
            print(f"üîç –û–¢–õ–ê–î–ö–ê –°–£–î–¨–ò: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM:")
            print(f"==== RAW JUDGE RESPONSE ====")
            print(response)
            print(f"==== END RAW JUDGE RESPONSE ====")
            
            parsed = parse_yaml_response(response)
            
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –ø–æ–ª—è error), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if "error" not in parsed:
                print(f"‚úÖ –û–¢–õ–ê–î–ö–ê –°–£–î–¨–ò: –í—Å–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω—ã")
                return parsed
                
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {parsed.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            if attempt < max_retries - 1:
                print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ—à–µ–Ω–∏–µ
        print(f"‚ùå –û–¢–õ–ê–î–ö–ê –°–£–î–¨–ò: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ—à–µ–Ω–∏–µ: REPLAN")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        return {
            "decision": "REPLAN",
            "reasoning": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π YAML –æ—Ç–≤–µ—Ç –æ—Ç —Å—É–¥—å–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            "state_analysis": {
                "last_step_status": "unknown",
                "source_relevance_score": 0.5,
                "consistency_with_context_score": 0.5,
                "contradiction_details": None,
                "is_loop_detected": False
            },
            "replan_instructions": {
                "strategy": "RETRY_CURRENT_APPROACH",
                "details": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥ —Å —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞"
            },
            "human_review_request": None,
            "updated_scratchpad": {
                "action": "NO_UPDATE",
                "data": {}
            }
        }
    
    @recordable_node
    def post(self, shared, prep_res, exec_res):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ exec_res –Ω–µ None
        if exec_res is None:
            shared["status"] = "error"
            shared["error"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: –°—É–¥—å—è –≤–µ—Ä–Ω—É–ª None"
            return "error"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        if exec_res.get("error"):
            shared["status"] = "error"
            shared["error"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {exec_res['error']}"
            return "error"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ decision
        if "decision" not in exec_res:
            shared["status"] = "error"
            shared["error"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'decision' –≤ –æ—Ç–≤–µ—Ç–µ —Å—É–¥—å–∏. –ü–æ–ª—É—á–µ–Ω–æ: {list(exec_res.keys())}"
            return "error"
        
        decision = exec_res["decision"]
        print(f"‚öñÔ∏è –†–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏: {decision}")
        print(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {exec_res['reasoning']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º scratchpad –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (isinstance(exec_res, dict) and 
            "updated_scratchpad" in exec_res and 
            isinstance(exec_res["updated_scratchpad"], dict) and
            exec_res["updated_scratchpad"].get("action") == "UPDATE"):
            scratchpad_data = exec_res["updated_scratchpad"].get("data", {})
            if isinstance(scratchpad_data, dict):
                shared["scratchpad"].update(scratchpad_data)
        
        if decision == "CONTINUE":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            shared["plan"]["current_step_index"] += 1
            shared["status"] = "executing"
            return "execute"
            
        elif decision == "REPLAN":
            # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
            shared["status"] = "planning"
            # TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ replan_instructions
            return "plan"
            
        elif decision == "FINALIZE":
            # –ì–æ—Ç–æ–≤—ã —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
            shared["status"] = "finalizing"
            return "finalize"
            
        elif decision == "REQUEST_HUMAN_REVIEW":
            # –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞
            shared["status"] = "human_review_required"
            shared["human_review_reason"] = exec_res.get("reasoning", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞") if isinstance(exec_res, dict) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
            return "human_review"
        
        else:
            shared["status"] = "error"
            shared["error"] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏: {decision}"
            return "error"

class FinalizerNode(Node):
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YAML-–ø—Ä–æ–º–ø—Ç–∞"""
    
    @recordable_node
    def prep(self, shared):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_steps = {}
        for step_id, result in shared["step_results"].items():
            if result.get("status") == "success":
                successful_steps[step_id] = result["output"]
        
        finalizer_input = {
            "user_query": shared["user_query"],
            "overall_goal": shared["plan"]["goal"],
            "summary_of_successful_steps": successful_steps
        }
        
        return finalizer_input
    
    @recordable_node
    def exec(self, finalizer_input):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º YAML-–ø—Ä–æ–º–ø—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        import yaml
        system_prompt = get_finalizer_prompt(
            user_query=finalizer_input["user_query"],
            overall_goal=finalizer_input["overall_goal"],
            summary_of_successful_steps=yaml.dump(finalizer_input["summary_of_successful_steps"], allow_unicode=True, default_flow_style=False)
        )
        
        # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        max_retries = 3
        for attempt in range(max_retries):
            print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É LLM (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})...")
            response = call_llm("–°–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", system_prompt)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ LLM")
            print(f"üîç –û–¢–õ–ê–î–ö–ê –§–ò–ù–ê–õ–ò–ó–ê–¢–û–†–ê: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM:")
            print(f"==== RAW FINALIZER RESPONSE ====")
            print(response)
            print(f"==== END RAW FINALIZER RESPONSE ====")
            
            parsed = parse_yaml_response(response)
            
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –ø–æ–ª—è error), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if "error" not in parsed:
                print(f"‚úÖ –û–¢–õ–ê–î–ö–ê –§–ò–ù–ê–õ–ò–ó–ê–¢–û–†–ê: YAML —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω")
                final_response = parsed.get("final_response")
                if final_response and isinstance(final_response, dict) and "analysis" in final_response:
                    print(f"üìù –û–¢–õ–ê–î–ö–ê –§–ò–ù–ê–õ–ò–ó–ê–¢–û–†–ê: –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(final_response['analysis'])} —Å–∏–º–≤–æ–ª–æ–≤")
                return parsed
                
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {parsed.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            if attempt < max_retries - 1:
                print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        print(f"‚ùå –û–¢–õ–ê–î–ö–ê –§–ò–ù–ê–õ–ò–ó–ê–¢–û–†–ê: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return parsed
    
    @recordable_node
    def post(self, shared, prep_res, exec_res):
        if "error" in exec_res:
            shared["status"] = "error"
            shared["error"] = f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {exec_res['error']}"
            return "error"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è final_response
        if "final_response" not in exec_res:
            shared["status"] = "error"
            shared["error"] = f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'final_response' –≤ –æ—Ç–≤–µ—Ç–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞. –ü–æ–ª—É—á–µ–Ω–æ: {list(exec_res.keys())}"
            return "error"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ final_response
        final_response = exec_res["final_response"]
        analysis_text = final_response.get("analysis", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if isinstance(analysis_text, str):
            # –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            analysis_text = analysis_text.replace("```", "")
        
        shared["final_answer"] = analysis_text
        shared["sources"] = final_response.get("sources", [])
        shared["limitations"] = final_response.get("limitations", [])
        shared["recommendations"] = final_response.get("recommendations", [])
        shared["status"] = "completed"
        
        print("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!")
        return "completed"

class HumanReviewNode(Node):
    """–£–∑–µ–ª –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞"""
    
    @recordable_node
    def prep(self, shared):
        return {
            "reason": shared.get("human_review_reason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"),
            "history": shared["execution_history"],
            "current_data": shared["step_results"]
        }
    
    @recordable_node
    def exec(self, prep_res):
        print("\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û –ß–ï–õ–û–í–ï–ö–ê üö®")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {prep_res['reason']}")
        print("\n–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        for entry in prep_res["history"]:
            print(f"  - –®–∞–≥ {entry['step_number']}: {entry['action']} -> {entry['status']}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
        return {"status": "human_review_requested", "data": prep_res}
    
    @recordable_node
    def post(self, shared, prep_res, exec_res):
        shared["human_review_result"] = exec_res
        return "completed"

class ErrorNode(Node):
    """–£–∑–µ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @recordable_node
    def prep(self, shared):
        return shared.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    @recordable_node
    def exec(self, error_msg):
        print(f"‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        return {"error_handled": True, "error_message": error_msg}
    
    @recordable_node
    def post(self, shared, prep_res, exec_res):
        shared["error_handled"] = True
        return "completed"