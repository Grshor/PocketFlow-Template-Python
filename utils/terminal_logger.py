import sys
import os
from datetime import datetime
from contextlib import contextmanager

class TerminalLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ñ–∞–π–ª"""
    
    def __init__(self, log_file="terminal.log", log_dir="logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä
        
        Args:
            log_file (str): –ò–º—è –ª–æ–≥ —Ñ–∞–π–ª–∞
            log_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.log_path = os.path.join(log_dir, f"{timestamp}_{log_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        self.original_stdout = sys.stdout
        self.original_stderr = sys.stderr
        
        # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.is_active = False
    
    def start_logging(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        if self.is_active:
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_file = open(self.log_path, 'w', encoding='utf-8')
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ç–æ–∫–∏ –Ω–∞ –Ω–∞—à–∏ –æ–±—ë—Ä—Ç–∫–∏
        sys.stdout = TeeOutput(self.original_stdout, self.log_file)
        sys.stderr = TeeOutput(self.original_stderr, self.log_file)
        
        self.is_active = True
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–∞
        print(f"üöÄ –ù–∞—á–∞—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ –§–∞–π–ª –ª–æ–≥–∞: {self.log_path}")
        print("=" * 70)
    
    def stop_logging(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if not self.is_active:
            return
        
        print("=" * 70)
        print(f"üèÅ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        sys.stdout = self.original_stdout
        sys.stderr = self.original_stderr
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if hasattr(self, 'log_file'):
            self.log_file.close()
        
        self.is_active = False
        
        print(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {self.log_path}")
    
    @contextmanager
    def logging_context(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.start_logging()
        try:
            yield self.log_path
        finally:
            self.stop_logging()


class TeeOutput:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    
    def __init__(self, original_stream, log_file):
        self.original_stream = original_stream
        self.log_file = log_file
    
    def write(self, text):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –æ–±–∞ –ø–æ—Ç–æ–∫–∞"""
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (–∫–æ–Ω—Å–æ–ª—å)
        self.original_stream.write(text)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        self.log_file.write(text)
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä—ã
        self.original_stream.flush()
        self.log_file.flush()
    
    def flush(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä—ã –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        self.original_stream.flush()
        self.log_file.flush()
    
    def __getattr__(self, name):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ—Ç–æ–∫—É"""
        return getattr(self.original_stream, name)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_global_logger = None

def start_terminal_logging(log_file="terminal.log", log_dir="logs"):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    
    Args:
        log_file (str): –ò–º—è –ª–æ–≥ —Ñ–∞–π–ª–∞
        log_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
    
    Returns:
        str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
    """
    global _global_logger
    
    if _global_logger and _global_logger.is_active:
        print("‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ")
        return _global_logger.log_path
    
    _global_logger = TerminalLogger(log_file, log_dir)
    _global_logger.start_logging()
    return _global_logger.log_path

def stop_terminal_logging():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    global _global_logger
    
    if _global_logger and _global_logger.is_active:
        _global_logger.stop_logging()
        return _global_logger.log_path
    else:
        print("‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        return None

def get_log_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∞"""
    global _global_logger
    
    if _global_logger:
        return _global_logger.log_path
    return None

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def auto_log(log_file="function.log", log_dir="logs"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        log_file (str): –ò–º—è –ª–æ–≥ —Ñ–∞–π–ª–∞
        log_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            logger = TerminalLogger(log_file, log_dir)
            with logger.logging_context():
                print(f"üéØ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")
                if args or kwargs:
                    print(f"üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã: args={args}, kwargs={kwargs}")
                
                try:
                    result = func(*args, **kwargs)
                    print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return result
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
                    raise
        
        return wrapper
    return decorator

if __name__ == "__main__":
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    log_path = start_terminal_logging("test.log")
    print("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–≥")
    print("–ò —ç—Ç–æ —Ç–æ–∂–µ!")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    except Exception as e:
        print(f"–ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É: {e}")
    
    stop_terminal_logging()
    print(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {log_path}") 